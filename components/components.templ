package components

import (
	"fmt"
	"net/http"
	types "wails3-htmx-template/internal"
)

// New Templates
// Inputs
templ Button(label string, endpoint string, hxTarget string) {
	<button class="btn btn-active btn-neutral ml-4" hx-get={ endpoint } hx-target={ hxTarget }>{ label }</button>
}

templ TextInput(name string, label string, endpoint string, hxTarget string, hxTrigger string) {
	<input type="text" name={ name } placeholder={ label } hx-get={ endpoint } hx-target={ hxTarget } class="input input-bordered w-full max-w-xs" hx-trigger={ hxTrigger } autocomplete="off"/>
}

templ NotificationItem(Index int, AlertTitle string, AlertContent string) {
	<li class="py-2">
		<div tabindex="0" class="collapse bg-base-200">
			<div class="collapse-title text-xl font-medium">
				{ AlertTitle }
			</div>
			<div class="collapse-content" hx-delete={ fmt.Sprintf("/notifications/%v", Index) } hx-trigger="click" hx-swap="innerHTML">
				<p>{ AlertContent }</p>
			</div>
		</div>
	</li>
}

// Forms
templ Count(count string) {
	@Button("Count is "+count, "", "")
}

templ GreetForm() {
	<div class="result" id="result">Please enter your name below ðŸ‘‡</div>
	@TextInput("name", "Enter Name", "/greet", "#result", "keyup changed delay:100ms")
}

// templ Greet(name string) {
// 	switch name {
// 		case "":
// 			<p>Hello { name }, It's show time!</p>
// 		default:
// 			<p>Please enter your name below ðŸ‘‡</p>
// 	}
// }

func Greet(w http.ResponseWriter, r *http.Request) {
	if r.FormValue("name") != "" {
		w.Write([]byte("Hello " + r.FormValue("name") + ", It's show time!"))
		return
	}
	w.Write([]byte("Please enter your name below ðŸ‘‡"))
}

templ Systray(status types.Systray, notifications []types.Notification, settings types.Settings) {
	if status.Notifications == "active" {
		<div>
			<ol class="space-4" hx-get="/notifications" hx-trigger="every 10s" hx-target="this" hx-swap="beforeend">
				@Notifications(notifications)
			</ol>
		</div>
	}
	if status.Settings == "active" {
		@Notifications(notifications)
	}
	@TrayNavBar(status)
}

templ Notifications(notifications []types.Notification) {
	for _, item := range notifications {
		@NotificationItem(item.ID, item.Title, item.Message)
	}
}

templ Settings(settings []types.Settings) {
	<div hx-get="/settings" hx-trigger="load" hx-target="this">
		Settings
	</div>
}

templ TrayNavBar(status types.Systray) {
	<div class="btm-nav">
		<button class={ status.Notifications } hx-get="/systray/notifications">
			<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path></svg>
			<span class="btm-nav-label">Notifications</span>
		</button>
		<button class={ status.Settings } hx-get="/systray/settings">
			<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
			<span class="btm-nav-label">Settings</span>
		</button>
	</div>
}

templ Index() {
	<div class="flex items-center justify-center py-12 px-6">
		<a wml-openURL="https://wails.io">
			<img src="/wails.png" class="h-32 p-4 mx-auto hover:opacity-80" alt="Wails logo"/>
		</a>
		<a wml-openURL="https://developer.mozilla.org/en-US/docs/Web/JavaScript">
			<img src="/javascript.svg" class="h-32 p-4 mx-auto hover:opacity-80" alt="JavaScript logo"/>
		</a>
		<a href="/api/hello/test" target="_blank">
			<img src="" class="h-32 p-4 mx-auto hover:opacity-80" alt="JavaScript logo"/>
		</a>
	</div>
	<h1 class="block text-4xl font-bold leading-tight">Wails + HTMX</h1>
	<div class="flex flex-col items-center justify-center mt-4 gap-4">
		@GreetForm()
		@Button("Press to Increment count with HTMX", "/counter", "this")
	</div>
	<div class="footer">
		<div>
			<p>Click on the Wails logo to learn more</p>
		</div>
		<div hx-get="/time" hx-trigger="every 10s" hx-target="#time">
			<p id="time">Listening for Time event...</p>
		</div>
	</div>
}
