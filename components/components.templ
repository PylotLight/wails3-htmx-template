package components

import "fmt"
import "net/http"
import "wails3-htmx-template/internal"

// New Templates
// Inputs
templ Button(label string, endpoint string, hxTarget string) {
	<button class="btn btn-active btn-neutral" hx-get={ endpoint } hx-target={ hxTarget }>{ label }</button>
}

templ TextInput(name string, label string, endpoint string, hxTarget string, hxTrigger string) {
	<input type="text" name={ name } placeholder={ label } hx-get={ endpoint } hx-target={ hxTarget } class="input input-ghost w-full max-w-xs" hx-trigger={ hxTrigger } autocomplete="off"/>
}

templ NotificationItem(Index int, AlertTitle string, AlertContent string) {
	<li class="py-2">
		<div tabindex="0" class="collapse bg-base-200">
			<div class="collapse-title text-xl font-medium">
				{ AlertTitle }
			</div>
			<div class="collapse-content" hx-delete={ fmt.Sprintf("/notifications/%v", Index) } hx-trigger="click" hx-swap="innerHTML">
				<p>{ AlertContent }</p>
			</div>
		</div>
	</li>
	// <li class="py-2">
	// 	<div tabindex="0" class="collapse bg-base-200 p-4 rounded-lg bg-gray-200 rounded-md bg-clip-padding backdrop-filter backdrop-blur-sm bg-opacity-20 border border-gray-100 hover:bg-opacity-10">
	// 		<div class="collapse-title text-xl font-medium">
	// 			{ AlertTitle }
	// 		</div>
	// 		<div class="collapse-content">
	// 			<p>{ AlertContent } </p>
	// 		</div>
	// 	</div>
	// </li>
}

// Forms
templ Count(count string) {
	@Button("count is "+count, "", "")
}

templ GreetForm() {
	<div class="result" id="result">Please enter your name below ðŸ‘‡</div>
	@TextInput("name", "Enter Name", "/greet", "#result", "keyup changed delay:100ms")
}

func Greet(w http.ResponseWriter, r *http.Request) {
	if r.FormValue("name") != "" {
		w.Write([]byte("Hello " + r.FormValue("name") + ", It's show time!"))
		return
	}
	w.Write([]byte("Please enter your name below ðŸ‘‡"))
}

templ Systray(status types.Systray, notifications []types.Notification, settings types.Settings) {
	// just the body loaded into systray. daisyui nav with content loaded in above.
	//
	if status.Notifications == "active" {
		<div>
			<ol class="space-4" hx-get="/notifications" hx-trigger="every 2s" hx-target="this" hx-swap="beforeend">
				@Notifications(notifications)
			</ol>
		</div>
	}
	if status.Settings == "active" {
		@Notifications(notifications)
	}
	@TrayNavBar(status)
}

templ Notifications(notifications []types.Notification) {
	for _, item := range notifications {
		@NotificationItem(item.ID, item.Title, item.Message)
	}
}

templ Settings(settings []types.Settings) {
	<div hx-get="/settings" hx-trigger="load" hx-target="this">
		Settings
	</div>
}

templ TrayNavBar(status types.Systray) {
	<div class="btm-nav">
		<button class={ status.Notifications } hx-get="/systray/notifications">
			<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path></svg>
			<span class="btm-nav-label">Notifications</span>
		</button>
		<button class={ status.Settings } hx-get="/systray/settings">
			<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
			<span class="btm-nav-label">Settings</span>
		</button>
		//   <button>
		//     <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" /></svg>
		//     <span class="btm-nav-label">Updates</span>
		//   </button>
	</div>
}

templ Index() {
	<div>
		<a wml-openURL="https://wails.io">
			<img src="/wails.png" class="logo" alt="Wails logo"/>
		</a>
		<a wml-openURL="https://developer.mozilla.org/en-US/docs/Web/JavaScript">
			<img src="/javascript.svg" class="logo vanilla" alt="JavaScript logo"/>
		</a>
	</div>
	<h1>Wails + HTMX</h1>
	<div class="card">
		@GreetForm()
		@Button("count is 0", "/counter", "this")
	</div>
	<div class="footer">
		<div>
			<p>Click on the Wails logo to learn more</p>
		</div>
		<div hx-sse="connect:/time">
			<p hx-trigger="sse:time" id="time">Listening for Time event...</p>
		</div>
	</div>
	<script type="module">
    import { Events } from "@wailsio/runtime";
        Events.On('time', (time) => {
			timeElement = document.queryselector("#time")
			console.log("test")
            timeElement.innerText = time.data;
        });
    </script>
}

// Old Templates
// templ TextInput(name string, placeholder string, method string,endpoint string,hxTrigger string) {
// 	<input
// 		type="text"
// 		name={ name }
// 		placeholder={ placeholder }
// 		hx-target="#result"
// 		if method == "get" {
// 			hx-get={ endpoint }
// 		}
// 		if method == "post" {
// 			hx-post={ endpoint }
// 		}
// 		hx-trigger={ hxTrigger }
// 		class={ "input join-item input-bordered input-primary w-full max-w-xs px-4 py-3 my-8" }
// 	/>
// }
templ twButton(label string) {
	<button
		class="w-full px-4 py-6 rounded-md font-semibold backdrop-filter backdrop-blur-lg backdrop-saturate-[180%] bg-[rgba(19,_48,_97,_0.75)] rounded-[12px] border-[1px] border-[solid] border-[rgba(255,255,255,0.125)] text-gray-300 hover:bg-gray-800 hover:text-white"
		type="button"
		hx-get="/counter"
		hx-target="this"
	>{ label }</button>
}

templ Index_Old() {
	<div class="block">
		<a
			href="https://wails.io"
			class="inline font-medium text-[#646cff] [text-decoration:inherit] hover:text-[#535bf2]"
			target="_blank"
		>
			<img
				src="/wails.png"
				class="logo inline h-[6em] p-[0.5em] hover:[filter:drop-shadow(0_0_2em_#646cffaa)]"
				alt="Wails logo"
			/>
		</a>
		<a
			href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"
			class="inline font-medium text-[#646cff] [text-decoration:inherit] hover:text-[#535bf2]"
			target="_blank"
		>
			<img
				src="/javascript.svg"
				class="logo vanilla inline h-[6em] p-[0.5em] hover:[filter:drop-shadow(0_0_2em_#646cffaa)] hover:[filter:drop-shadow(0_0_2em_#f7df1eaa)]"
				alt="JavaScript logo"
			/>
		</a>
		<h1 class="mt-10 mb-10 text-[3.2em] leading-[1.1] font-semibold block font-bold">
			Hello Wails!
		</h1>
		<div class="card p-[2em]">
			<div class="flex justify-around items-center">
				<label>JS Button</label>
				<label>HTMX Button</label>
			</div>
			<div class="flex justify-around items-center">
				<button
					class="rounded-[8px] border-[1px] border-[solid] border-[transparent] px-[1.2em] py-[0.6em] text-[1em] font-medium [font-family:inherit] bg-[#1a1a1a] cursor-pointer [transition:border-color_0.25s] hover:border-[#646cff] outline-[4px_auto_-webkit-focus-ring-color]"
					id="counter"
					type="button"
				>count is 0</button>
				<button
					class="rounded-[8px] border-[1px] border-[solid] border-[transparent] px-[1.2em] py-[0.6em] text-[1em] font-medium [font-family:inherit] bg-[#1a1a1a] cursor-pointer [transition:border-color_0.25s] hover:border-[#646cff] outline-[4px_auto_-webkit-focus-ring-color]"
					type="button"
					hx-get="/counter"
					hx-target="this"
				>count is 0</button>
			</div>
		</div>
		<p class="read-the-docs text-[#888]">
			Click on the Wails logo to learn more
		</p>
	</div>
	<script>
  let count = 0;
  const Button = document.getElementById("counter");
  Button.addEventListener("click", () => {
    count++;
    Button.innerHTML = `count is ${count}`;
  });
</script>
}
